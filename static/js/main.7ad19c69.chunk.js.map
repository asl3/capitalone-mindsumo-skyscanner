{"version":3,"sources":["components/Quotes.js","components/AirportInfo.js","components/Header.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","props","minprice","Number","MAX_SAFE_INTEGER","quotes","map","quote","MinPrice","className","id","QuoteId","QuoteDateTime","AirportInfo","useState","setQuotes","currency","setCurrency","originplace","setOriginPlace","destinationplace","setDestinationPlace","outboundpartialdate","setOutBoundPartialDate","inboundpartialdate","setInBoundPartialDate","showQuotes","setShowQuotes","onSubmit","e","a","reqOptions","method","headers","fetch","URLSearchParams","response","json","console","log","preventDefault","fetchMyAPI","htmlFor","value","onChange","target","required","Header","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ad19c69.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Quotes.css';\r\n\r\nfunction Quotes(props) { \r\n    let minprice = Number.MAX_SAFE_INTEGER\r\n\r\n    // iterate through all prices, if current price is lower than min, set minprice to current price\r\n    {props.quotes && props.quotes.map(quote => {\r\n        if (quote.MinPrice < minprice) {\r\n            minprice = quote.MinPrice;\r\n        }\r\n    })}\r\n\r\n    // return a display table containing resulting data values from API request\r\n    return (\r\n        <div className = \"quotes\">\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Quote ID</th>\r\n                        <th>Minimum Price</th>\r\n                        <th>Date and Time</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>  \r\n            \r\n                {props.quotes && props.quotes.map(quote => {\r\n                    // if current price equal to min price, bold entire row\r\n                    if (quote.MinPrice == minprice) {\r\n                        return (<tr id={quote.QuoteId}>\r\n                            <td><b>{quote.QuoteId}</b></td>\r\n                            <td><b>{quote.MinPrice}</b></td>\r\n                            <td><b>{quote.QuoteDateTime}</b></td>\r\n                        </tr>)\r\n                    } else {\r\n                        return (<tr id={quote.QuoteId}>\r\n                            <td>{quote.QuoteId}</td>\r\n                            <td>{quote.MinPrice}</td>\r\n                            <td>{quote.QuoteDateTime}</td>\r\n                        </tr>)\r\n                    }\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quotes;","import React, {useState} from 'react';\r\nimport './AirportInfo.css';\r\nimport Quotes from './Quotes';\r\n\r\nfunction AirportInfo() {\r\n    //declare constants for path parameters\r\n    const [quotes, setQuotes] = useState([])\r\n    const [currency, setCurrency] = useState(\"\")\r\n    const [originplace, setOriginPlace] = useState(\"\")\r\n    const [destinationplace, setDestinationPlace] = useState(\"\")\r\n    const [outboundpartialdate, setOutBoundPartialDate] = useState(\"\")\r\n    const [inboundpartialdate, setInBoundPartialDate] = useState(\"\")\r\n    const [showQuotes, setShowQuotes] = useState(false)\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault()\r\n        async function fetchMyAPI() {\r\n            const reqOptions = {\r\n                method: 'GET',\r\n                headers: {\r\n                    \"x-rapidapi-key\": \r\n                    \"f4d96e263bmshfb7569b1ceca5c6p16340djsn1967d8e15c5e\",\r\n                    \"x-rapidapi-host\": \r\n                    \"skyscanner-skyscanner-flight-search-v1.p.rapidapi.com\",\r\n                    \"useQueryString\": true\r\n                }\r\n            }\r\n            const qString = {\r\n                \"inboundpartialdate\": inboundpartialdate\r\n            }\r\n            // append path parameters to URL\r\n            let response = await fetch('https://skyscanner-skyscanner-flight-search-v1.p.rapidapi.com/apiservices/browseroutes/v1.0/US/' + currency + '/en-US/' + originplace + \"/\" + destinationplace + \"/\" + outboundpartialdate + \"/?\" + + new URLSearchParams({inboundpartialdate: inboundpartialdate}), reqOptions)     \r\n            response = await response.json() \r\n            setQuotes(response.Quotes)\r\n            console.log(response.Quotes)\r\n        }\r\n        fetchMyAPI()\r\n        setOutBoundPartialDate(\"\")\r\n        setShowQuotes(true) \r\n    }\r\n    \r\n    return <div className=\"flightinfo\">\r\n        <form className = \"form\" onSubmit={handleSubmit}>\r\n            {/* include text boxes to take relevant input from user */}\r\n            <label htmlFor=\"originplace\">Origin Airport Code</label>\r\n            <input id=\"originplace\" value={originplace} onChange={(e) => setOriginPlace(e.target.value)} required />\r\n\r\n            <label htmlFor=\"destinationplace\">Destination Airport Code</label>\r\n            <input id=\"destinationplace\" value={destinationplace} onChange={(e) => setDestinationPlace(e.target.value)} required />\r\n            \r\n            <label htmlFor=\"outboundpartialdateInput\">Outbound Date</label>\r\n            <input id=\"outboundpartialdateInput\" value={outboundpartialdate} onChange={(e) => setOutBoundPartialDate(e.target.value)} required />\r\n            \r\n            <label htmlFor=\"inboundpartialdateInput\">Inbound Date</label>\r\n            <input id=\"inboundpartialdateInput\" value={inboundpartialdate} onChange={(e) => setInBoundPartialDate(e.target.value)} required />\r\n            \r\n            <label htmlFor=\"currencyInput\">Currency</label>\r\n            <input id=\"currencyInput\" value={currency} onChange={(e) => setCurrency(e.target.value)} required />   \r\n            \r\n            <button className=\"search\">Submit</button>\r\n        </form>\r\n\r\n        {/* only show Quotes table if the showQuotes variable has been set to true */}\r\n        { showQuotes ? <Quotes quotes={quotes}></Quotes> : <></>}\r\n    </div>\r\n}\r\nexport default AirportInfo;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header(props) { \r\n    return (\r\n        <div>\r\n            <h1 className = \"header\">Flight Information</h1>\r\n            <p className = \"instructions\"><b>Enter information below to view flight options between two destinations for specified dates.</b> Enter origin and destination in airport code format (e.g. SFO-sky, ORD-sky). Enter currency in ISO format (e.g. USD, EUR). For unspecified dates, enter \"anytime.\"</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\nfunction Footer(props) { \r\n    return (\r\n        <div>\r\n            <p className = \"footer\">Created by Amanda Liu for 2021 Capital One MindSumo Challenge. Developed using React.js and Skyscanner Flight Search API.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './App.css';\r\nimport AirportInfo from './components/AirportInfo.js';\r\nimport Header from './components/Header.js';\r\nimport Footer from './components/Footer.js';\r\n\r\n\r\n// display App components\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <AirportInfo />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import App from './App';\r\n\r\n// const myfirstelement = <h1>Hello React!</h1>\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}